{"version":3,"file":"static/development/pages/index.js","sources":["webpack:///webpack/bootstrap","webpack:///./components/Header.js","webpack:///./components/Layout.js","webpack:///./ethereum/getWeb3.js","webpack:///./ethereum/receptionFactory.js","webpack:///./ethereum/web3.js","webpack:///./pages/index.js","webpack:///./routes.js","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"next-routes\"","webpack:///external \"next/head\"","webpack:///external \"react\"","webpack:///external \"semantic-ui-react\"","webpack:///external \"truffle-contract\"","webpack:///external \"web3\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","import React from \"react\";\nimport { Menu, Icon } from \"semantic-ui-react\";\nimport { Link } from \"../routes\";\nexport default () => {\n  return (\n    <Menu style={{ marginTop: 10 }}>\n      <Link route=\"/\">\n        <a className=\"item\">Health Care Management System</a>\n      </Link>\n    </Menu>\n  );\n};\n","import React from \"react\";\nimport { Container } from \"semantic-ui-react\";\nimport Head from \"next/head\";\nimport Header from \"./Header\";\nexport default props => {\n  return (\n    <Container>\n      <Head>\n        <link\n          rel=\"stylesheet\"\n          href=\"//cdn.jsdelivr.net/npm/semantic-ui@2.4.0/dist/semantic.min.css\"\n        />\n      </Head>\n\n      <Header />\n      {props.children}\n    </Container>\n  );\n};\n","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import web3 from \"./getWeb3\";\nimport ReceptionsitFactory from \"../build/contracts/ReceptionsitFactory.json\";\nimport truffleContract from \"truffle-contract\";\nlet contract, instanceFactory;\n() => {\n  contract = truffleContract(ReceptionsitFactory);\n  contract.setProvider(web3.currentProvider);\n\n  instanceFactory = contract.deployed();\n};\nexport default instanceFactory;\n","import Web3 from \"web3\";\n\nlet web3;\n\nif (typeof window !== \"undefined\" && typeof window.web3 !== \"undefined\") {\n  //we are in browser and metamask is running\n  web3 = new Web3(window.web3.currentProvider);\n} else {\n  //we are on the server OR user is not running metamask\n  const provider = new Web3.providers.HttpProvider(\"http://localhost:9545\");\n\n  web3 = new Web3(provider);\n}\n\nexport default web3;\n","import React, { Component } from \"react\";\nimport ReceptionsitFactory from \"../build/contracts/ReceptionsitFactory.json\";\nimport Receptionist from \"../build/contracts/Receptionsit.json\";\nimport { Form, Button, Input, Message, Card } from \"semantic-ui-react\";\nimport { Link } from \"../routes\";\n//import getWeb3 from \"../ethereum/getWeb3\";\nimport web3 from \"../ethereum/web3\";\nimport truffleContract from \"truffle-contract\";\nimport Layout from \"../components/Layout\";\nimport instanceFactoryFile from \"../ethereum/receptionFactory\";\nclass index extends Component {\n  state = {\n    web3: null,\n    accounts: null,\n    hospitalName: \"\",\n    receptionistName: \"\",\n    instanceFactory1: \"\",\n    receptionistInstance: \"\",\n    recetionistAddress: \"\",\n    instanceFactory: \"\",\n    receptionist: \"\",\n    receptionList: []\n  };\n\n  static async getInitialProps() {\n    //const web3 = await getWeb3();\n    console.log(\"web3\", web3.version);\n    const accounts = await web3.eth.getAccounts();\n\n    //this.setState({ web3, accounts });\n    const Contract = truffleContract(ReceptionsitFactory);\n    Contract.setProvider(web3.currentProvider);\n\n    const instanceFactory = await Contract.deployed();\n    console.log(\"Address:\", instanceFactory);\n    const receptionCount = await instanceFactory.getReceptionList.call();\n    console.log(receptionCount);\n    const receptionist = await Promise.all(\n      Array(parseInt(receptionCount))\n        .fill()\n        .map((element, index) => {\n          return instanceFactory.receptionSummary.call(index);\n        })\n    );\n    console.log(\"Receptionist Array\", receptionist[0]);\n\n    return { receptionist };\n  }\n\n  // componentDidMount = async () => {\n  //   //  const web3 = await getWeb3();\n  //   console.log(\"web3\", web3.version);\n  //   const accounts = await web3.eth.getAccounts();\n  //   //  this.setState({ web3, accounts });\n  //   const Contract = truffleContract(ReceptionsitFactory);\n  //   Contract.setProvider(web3.currentProvider);\n  //   console.log(\"FromFile:\", instanceFactoryFile);\n  //   const instanceFactory = await Contract.deployed();\n  //   console.log(\"address\", instanceFactory.address);\n  //   const receptionCount = await instanceFactory.getReceptionList.call();\n  //   console.log(\"lenght:\", receptionCount.length);\n  //   const deployed = await instanceFactory.getDeployedReception.call();\n  //   console.log(\"factory total:\", deployed.length);\n  //   const receptionList = await Promise.all(\n  //     Array(parseInt(receptionCount.length))\n  //       .fill()\n  //       .map((element, index) => {\n  //         console.log(\"index:\", index);\n  //         return instanceFactory.receptionSummary.call(index);\n  //       })\n  //   );\n  //   this.setState({ receptionList: receptionList });\n  //   console.log(\"Length\", this.state.receptionList.length);\n  // };\n  // // try {\n  //     const web3 = await getWeb3();\n  //     const accounts = await web3.eth.getAccounts();\n  //     this.setState({ web3, accounts });\n  //     const Contract = truffleContract(ReceptionsitFactory);\n  //     Contract.setProvider(web3.currentProvider);\n  //\n  //     const instanceFactory = await Contract.deployed();\n  //\n  //     // const instanceFactory1 = instanceFactory.address;\n  //     // console.log(\"factory:\", instanceFactory);\n  //     // this.setState({ instanceFactory });\n  //     // console.log(\"instance:\", instanceFactory1);\n  //     // this.setState({ instanceFactory1 });\n  //     // const manager = await instanceFactory.manager.call();\n  //\n  //     //  var manager = await instanceFactory.manager.call();\n  //\n  //     //  const receptionistInstance = await ContractReceptionist.at(address);\n  //\n  //     // const rec = await instanceFactory.createReceptionist(\"MAYO\", \"AMAN\", {\n  //     //   from: accounts[0]\n  //     // });\n  //\n  //     const recetionistAddress = await instanceFactory.accountToAddress.call(\n  //       accounts[0]\n  //     );\n  //\n  //     const ContractReceptionist = truffleContract(Receptionist);\n  //     ContractReceptionist.setProvider(web3.currentProvider);\n  //     const instanceReceptionist = await ContractReceptionist.at(\n  //       recetionistAddress\n  //     );\n  //     const summary = await instanceReceptionist.getSummary.call();\n  //     this.setState({\n  //       hospitalName: summary[0],\n  //       receptionistName: summary[1]\n  //     });\n  //\n  //     console.log(\"Manager:\", manager);\n  //     console.log(\"Factory address:\", instanceFactory.address);\n  //     console.log(\"ReceptionistAddress:\", recetionistAddress);\n  //     console.log(\"Summary:\", summary);\n  //     console.log(web3.version);\n  //     console.log(accounts[0]);\n  //     this.setState({\n  //       instanceReceptionist,\n  //       recetionistAddress\n  //     });\n  //   } catch (error) {\n  //     console.log(error);\n\n  renderCampiagns() {\n    console.log(\"BRFORE:\", this.props.receptionist);\n    const items = this.props.receptionist.map((element, index) => {\n      const address = element[3];\n      return {\n        header: \"Hospital Name:  \" + element[0],\n        description: \"Admin Name:  \" + element[1],\n        meta: \"Account of Admin:  \" + element[2],\n\n        extra: (\n          <Link route={`hospital/${address}`}>\n            <a color=\"blue\">Visit Hospital</a>\n          </Link>\n        ),\n        fluid: true\n      };\n    });\n    console.log(\"Lenght\", this.props.receptionist);\n\n    return <Card.Group items={items} />;\n  }\n\n  onSubmit = async event => {\n    event.preventDefault();\n\n    const { web3, instanceFactory1, instanceFactory } = this.state;\n    const accounts = await web3.eth.getAccounts();\n    console.log(web3, accounts, instanceFactory1, instanceFactory);\n\n    const rec = await instanceFactory.createReceptionist(\n      this.state.hospitalName,\n      this.state.receptionistName,\n      {\n        from: accounts[0]\n      }\n    );\n\n    // console.log(\"Accounts\", this.state.accounts);\n    // console.log(\"instance:\", this.state.instanceFactory1);\n    //console.log(\"Factory:\", this.state.instanceFactory);\n    //console.log(\"web3\", this.state.web3);\n    //const web3 = this.state.web3;\n\n    //  const manager = await instanceFactory.manager.call();\n    //  var manager = await instanceFactory.manager.call();\n\n    //const receptionistInstance = await ContractReceptionist.at(address);\n\n    // const rec = await instanceFactory.createReceptionist(\n    //   this.state.hospitalName,\n    //   this.state.receptionistName,\n    //   {\n    //     from: this.state.accounts\n    //   }\n    // );\n\n    // const recetionistAddress = await instanceFactory.accountToAddress.call(\n    //   accounts[0]\n    // );\n\n    // const ContractReceptionist = truffleContract(Receptionist);\n    // ContractReceptionist.setProvider(web3.currentProvider);\n    // const instanceReceptionist = await ContractReceptionist.at(\n    //   recetionistAddress\n    // );\n    // const Contract = truffleContract(ReceptionsitFactory);\n    // Contract.setProvider(web3.currentProvider);\n    // const instanceFactory = await Contract.at(this.state.instanceFactory1);\n    // console.log(\"Address:\", instanceFactory);\n    // const manager = await instanceFactory.manager.call();\n    // console.log(\"Manager\", manager);\n    // console.log(\"BEFORE\");\n    // const deployed = await instanceFactory.getDeployedCompaigns.call();\n    // console.log(\"deployed\", deployed);\n    //\n    // const newReceptionist = await Contract.at(this.state.instanceFactory1);\n    // console.log(\"new Reception\", newReceptionist);\n    // await newReceptionist.createReceptionist(\n    //   this.state.hospitalName,\n    //   this.state.receptionistName,\n    //   {\n    //     from: this.state.accounts\n    //   }\n    // );\n    // console.log(\"AFTER\");\n    //\n    // const ContractReceptionist = truffleContract(Receptionist);\n    // ContractReceptionist.setProvider(web3.currentProvider);\n    // const instanceReceptionist = await ContractReceptionist.at(\n    //   newReceptionist.address\n    // );\n    // const summary = await instanceReceptionist.getSummary.call();\n    // this.setState({\n    //   hospitalName: summary[0],\n    //   receptionistName: summary[1]\n    // });\n    // console.log(\"Summary:\", summary);\n\n    // const ContractReceptionist = truffleContract(Receptionist);\n    // ContractReceptionist.setProvider(web3.currentProvider);\n    // // const instanceReceptionist = await ContractReceptionist.at(\n    //   recetionistAddress\n    // );\n    //  try {\n    //   const Contract = truffleContract(ReceptionsitFactory);\n    //    Contract.setProvider(web3.currentProvider);\n    //\n    //    const instanceFactory = await Contract.deployed();\n    // //   const manager = await instanceFactory.manager.call();\n    //   //  var manager = await instanceFactory.manager.call();\n    //   console.log(manager);\n    //   const receptionistInstance = await ContractReceptionist.at(address);\n    //   const rec = await instanceFactory.createReceptionist(\n    //     this.state.hospitalName,\n    //     this.state.receptionistName,\n    //     {\n    //       from: this.state.accounts[0]\n    //     }\n    //   );\n    //   const recetionistAddress = await instanceFactory.accountToAddress.call(\n    //     accounts[0]\n    //   );\n    //\n    //   const ContractReceptionist = truffleContract(Receptionist);\n    //   ContractReceptionist.setProvider(web3.currentProvider);\n    //   const instanceReceptionist = await ContractReceptionist.at(\n    //     recetionistAddress\n    //   );\n    // } catch (error) {\n    //   console.log(error);\n    // }\n  };\n\n  onHospitalHandle = event => {\n    this.setState({ hospitalName: event.target.value });\n  };\n  onReceptionistHandle = event => {\n    this.setState({ receptionistName: event.target.value });\n  };\n\n  render() {\n    // if (!this.state.recetionistAddress) {\n    //   return (\n    //     <Layout>\n    //       <h1>\n    //         Your are not Registered or you have selected wrong Account in\n    //         metamask\n    //       </h1>\n    //       <Link route=\"/register\">\n    //         <a>follow this link to register</a>\n    //       </Link>\n    //\n    //       <div>\n    //         <h1>register new Recetionist</h1>\n    //         <h3>Create new Receptionist</h3>\n    //         <Form onSubmit={this.onSubmit}>\n    //           <Form.Field>\n    //             <label>Hospital Name</label>\n    //             <Input\n    //               value={this.state.hospitalName}\n    //               onChange={this.onHospitalHandle}\n    //             />\n    //           </Form.Field>\n    //           <Form.Field>\n    //             <label>Admin Name</label>\n    //             <Input\n    //               value={this.state.receptionistName}\n    //               onChange={this.onReceptionistHandle}\n    //             />\n    //           </Form.Field>\n    //           <Button primary> Create </Button>\n    //         </Form>\n    //\n    //         <h1>Accounts: {this.state.accounts}</h1>\n    //       </div>\n    //     </Layout>\n    //   );\n    // }\n    return (\n      <Layout>\n        <div>\n          <Link route=\"hospital/register\">\n            <a>\n              <Button\n                floated=\"right\"\n                primary\n                content=\"Register New Hospital\"\n                icon=\"add circle\"\n                labelPosition=\"left\"\n              />\n            </a>\n          </Link>\n\n          <h2>List Of All Registered Hospitals</h2>\n        </div>\n        <hr />\n        {this.renderCampiagns()};\n      </Layout>\n    );\n  }\n}\nexport default index;\n","const routes = require(\"next-routes\")();\nroutes\n\n  .add(\"/hospital/register\", \"/hospital/register\")\n  .add(\"/hospital/:address\", \"/hospital/hospitalDetails\");\nmodule.exports = routes;\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"next-routes\");","module.exports = require(\"next/head\");","module.exports = require(\"react\");","module.exports = require(\"semantic-ui-react\");","module.exports = require(\"truffle-contract\");","module.exports = require(\"web3\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAFA;AAUA;;;;;;;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAHA;AAAA;AAAA;AACA;AADA;AAOA;AACA;AARA;AAAA;AACA;AADA;AAAA;AAAA;AAUA;AACA;AAXA;AAAA;AAAA;AACA;AADA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAGA;AACA;AACA;AACA;AACA;AA7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8BA;AAjCA;AACA;AAkCA;;;;;;;;;;;;ACrCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AACA;;;;;;AAwIA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAIA;AACA;AALA;AAAA;AAWA;AADA;AACA;AAXA;AAOA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AA8GA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;;;;AAxNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAGA;AAVA;AAYA;AACA;AAEA;AAAA;AAAA;AACA;;;AAwHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAGA;AACA;AACA;AACA;AACA;AALA;AAgBA;;;;;;;;;;;;AA5SA;AACA;;AACA;AACA;;AADA;AAEA;AACA;AACA;;AAEA;AACA;;AADA;AACA;;AACA;AACA;;AADA;AACA;;AACA;AAIA;AACA;AACA;;AANA;AAOA;AAEA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;AArCA;AACA;AA4TA;;;;;;;;;;;ACvUA;AACA;AAAA;AAIA;;;;;;;;;;;;;;;;;;;;;;;ACLA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}