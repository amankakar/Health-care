{"version":3,"file":"static/webpack/static/development/pages/hospital/hospitalDetails.js.9066fca6753d77ffe67c.hot-update.js","sources":["webpack:///./pages/hospital/hospitalDetails.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ToggleDisplay from \"react-toggle-display\";\nimport ReceptionsitFactory from \"../../build/contracts/ReceptionsitFactory.json\";\nimport Receptionist from \"../../build/contracts/Receptionsit.json\";\nimport PatientFactory from \"../../build/contracts/PatientFactory.json\";\nimport Patient from \"../../build/contracts/Patient.json\";\nimport DoctorFactory from \"../../build/contracts/DoctorFactory.json\";\nimport Doctor from \"../../build/contracts/Doctor.json\";\nimport { Card, Button, Tab, Form, Input, Dropdown } from \"semantic-ui-react\";\nimport DatetimePicker from \"react-semantic-datetime\";\nimport moment from \"moment\"; //for date picker\nimport { BigNumber } from \"bignumber.js\";\n\nimport { Link } from \"../../routes\";\nimport getWeb3 from \"../../ethereum/getWeb3\";\nimport web3 from \"../../ethereum/web3\";\nimport truffleContract from \"truffle-contract\";\nimport Layout from \"../../components/Layout\";\n// import Dropdown from \"react-dropdown\";\n// import \"../style.css\";\nclass hospitalDetails extends Component {\n  //intialize state of variable use\n  state = {\n    show: false,\n    patientName: \"\",\n    patientAge: \"\",\n    patientGender: \"\",\n    patientId: \"\",\n    doctorName: \"\",\n    doctorGender: \"\",\n    doctorQualification: \"\",\n    doctorId: \"\",\n    appointmentId: \"\",\n    patientAccount: \"\",\n    doctorAccount: \"\",\n    textArea: \"\",\n    currentPatientValue: \"\",\n    currentDoctorValue: \"\",\n    notAdmin: \"\",\n    date: moment(),\n    date1: \"\",\n    dateTimeOpen: false,\n    patientIdArray: null,\n    doctorIdArray: null\n  };\n  //get Address of  hospital/ Receptionist contract provided in intial props and set show contract information\n  static async getInitialProps(props) {\n    const address = props.query.address;\n    console.log(\"ADdress:\", address);\n    const accounts = await web3.eth.getAccounts();\n    const ContractReceptionist = truffleContract(Receptionist);\n    ContractReceptionist.setProvider(web3.currentProvider);\n    const instanceReceptionist = await ContractReceptionist.at(address);\n    const hospitalSummary = await instanceReceptionist.getSummary.call();\n    console.log(accounts[0], \"and acctual is ===:\", hospitalSummary[2]);\n    const optionsArray = [\"one\", \"two\", \"three\"];\n    console.log(\"S\", hospitalSummary);\n\n    //  console.log(Factory);\n    //PatinentContract\n    //const Contract = truffleContract(Doctor);\n    //console.log(Contract);\n    //Contract.setProvider(web3.currentProvider);\n\n    return {\n      address: props.query.address,\n      hospitalName: hospitalSummary[0],\n      adminName: hospitalSummary[1],\n      manager: hospitalSummary[2]\n    };\n  }\n  //unlock admin view\n  onUnlockView = async event => {\n    event.preventDefault();\n    var admin;\n    console.log(\"Clicked\");\n    //const web3 = await getWeb3();\n    console.log(\"web3:\", web3);\n    const accounts = await web3.eth.getAccounts();\n    console.log(\"account at index:\", this.props.manager);\n    console.log(\"account in metamask\", accounts);\n    const Factory = truffleContract(PatientFactory);\n    //  console.log(Factory);\n    Factory.setProvider(web3.currentProvider);\n    console.log(Factory);\n\n    const patientFactoryInstance = await Factory.deployed();\n\n    const patientList = await patientFactoryInstance.getPatientList.call();\n    this.setState({ patientIdArray: patientList });\n    this.preparePatientDropDown();\n\n    const FactoryDoctor = truffleContract(DoctorFactory);\n    //  console.log(Factory);\n    FactoryDoctor.setProvider(web3.currentProvider);\n    const doctorFactoryInstance = await FactoryDoctor.deployed();\n    const doctorList = await doctorFactoryInstance.getDoctorList.call();\n    this.setState({ doctorIdArray: doctorList });\n    //console.log(\"patientList:\", patientList.length);\n    if (this.props.manager === accounts[0]) {\n      this.setState({ show: !this.state.show });\n      //this.renderDropDownPatient();\n      //Patient factory\n      // const Factory = truffleContract(PatientFactory);\n      // //  console.log(Factory);\n      // Factory.setProvider(web3.currentProvider);\n      // //  console.log(Factory);\n      // //PatinentContract\n      // const Contract = truffleContract(Patient);\n      // //console.log(Contract);\n      // Contract.setProvider(web3.currentProvider);\n      // //  console.log(Contract);\n      // const patientFactoryInstance = await Factory.deployed();\n      // //console.log(\"RESULT:\", patientFactoryInstance.address);\n      // try {\n      //   const result = await patientFactoryInstance.addPatient(\n      //     1,\n      //     \"Aman\",\n      //     \"Male\",\n      //     24,\n      //     accounts[0],\n      //     { from: accounts[0] }\n      //   );\n      //   console.log(\"RESULT:\", result);\n      // } catch (error) {\n      //   console.error(error);\n      // }\n      //\n      // const patientId = await patientFactoryInstance.patientIdToAddress.call(1);\n      // //  const patientFactoryInstance = await Factory.deployed();\n      // console.log(\"address of patient:\", patientId);\n      //\n      // // console.log(\"Address of Patient\", patientId.address);\n      // console.log(patientFactoryInstance.address);\n      //\n      // const man = await patientFactoryInstance.manager.call();\n      // console.log(man);\n      // // this.setState({ patientId: [\"aman\", \"khan\"] });\n      console.log(\"ISADMIn:\", this.state.show);\n    } else {\n      this.setState({ show: false });\n      this.setState({\n        notAdmin:\n          \"you are not admin or you have selected Wrong account in Metamask please check\"\n      });\n      console.log(\"ISADMIn:\", this.state.show);\n    }\n  };\n\n  //Add Patient\n  addPatient = async () => {\n    //const { patientFactoryInstance } = this.props;\n    const Factory = truffleContract(PatientFactory);\n    //  console.log(Factory);\n    Factory.setProvider(web3.currentProvider);\n    console.log(Factory);\n    //PatinentContract;\n    const Contract = truffleContract(Patient);\n    //console.log(Contract);\n    Contract.setProvider(web3.currentProvider);\n    //  console.log(Contract);\n    const patientFactoryInstance = await Factory.deployed();\n    console.log(\"RESULT:\", patientFactoryInstance.address);\n\n    try {\n      const accounts = await web3.eth.getAccounts();\n\n      const result = await patientFactoryInstance.addPatient(\n        // 1,\n        // \"Aman\",\n        // \"Male\",\n        // 24,\n        // accounts[0],\n        this.state.patientId,\n        this.state.patientName,\n        this.state.patientGender,\n        this.state.patientAge,\n        this.state.patientAccount,\n        { from: accounts[0] }\n      );\n      console.log(\"RESULT:\", result);\n    } catch (error) {\n      console.error(error);\n    }\n\n    const patientinstanceAddress = await patientFactoryInstance.patientIdToAddress.call(\n      this.state.patientId\n    );\n    const patientInstance = await Contract.at(patientinstanceAddress);\n\n    const summary = await patientInstance.getSummary.call(this.state.patientId);\n    console.log(\"summary:\", summary);\n    //  const patientFactoryInstance = await Factory.deployed();\n    console.log(\"address of patient:\", patientinstanceAddress);\n    this.preparePatientDropDown();\n    // const patientList = await patientFactoryInstance.getPatientList.call();\n    // const patient = await Promise.all(\n    //   Array(parseInt(patientList))\n    //     .fill()\n    //     .map((element, index) => {\n    //       return patientFactoryInstance.patientId.call(index);\n    //       // .then((element , index)=>{\n    //       //\n    //       // })\n    //       // ;\n    //     })\n    // );\n    // console.log(\"Patient list:\", patient);\n    // this.setState({ patientIdArray: patient });\n    //\n    // console.log(\"patientList:\", this.state.patientIdArray);\n  };\n  //prepare dropdown for patient\n  async preparePatientDropDown() {\n    const FactoryPatient = truffleContract(PatientFactory);\n    //  console.log(Factory);\n    FactoryPatient.setProvider(web3.currentProvider);\n\n    const patientFactoryInstance = await FactoryPatient.deployed();\n\n    const patientList = await patientFactoryInstance.getPatientList.call();\n    const patient = await Promise.all(\n      Array(parseInt(patientList))\n        .fill()\n        .map((element, index) => {\n          return patientFactoryInstance.patientId.call(index);\n          // .then((element , index)=>{\n          //\n          // })\n          // ;\n        })\n    );\n    console.log(\"Patient list:\", patient);\n    this.setState({ patientIdArray: patient });\n\n    console.log(\"patientList:\", this.state.patientIdArray);\n  }\n\n  //prepare dropdown for doctor id\n  async prepareDcotorDropdown() {}\n  //Add Doctor\n  addDoctor = async event => {\n    //  console.log(Contract);\n    const doctorFactoryInstance = await Factory.deployed();\n    //console.log(\"RESULT:\", patientFactoryInstance.address);\n\n    try {\n      const accounts = await web3.eth.getAccounts();\n\n      const result = await doctorFactoryInstance.addDoctor(\n        // 1,\n        // \"Aman\",\n        // \"Male\",\n        // 24,\n        // accounts[0],\n        this.state.doctorId,\n        this.state.doctorName,\n        this.state.doctorGender,\n        this.state.doctorQualification,\n        this.state.doctorAccount,\n        { from: accounts[0] }\n      );\n      console.log(\"RESULT:\", result);\n    } catch (error) {\n      console.error(error);\n    }\n\n    const doctorInstanceAddress = await doctorFactoryInstance.doctorIdToAddress.call(\n      this.state.doctorId\n    );\n    const doctorInstance = await Contract.at(doctorInstanceAddress);\n    //\n    // const summary = await doctorInstance.getSummary.call(this.state.doctorId);\n    // console.log(\"summary:\", summary);\n    const doctorList = await doctorFactoryInstance.getDoctorList.call();\n    console.log(\"doctorlist:\", doctorList.length);\n    //  const patientFactoryInstance = await Factory.deployed();\n    console.log(\"address of Doctor:\", doctorInstanceAddress);\n\n    // const requests = await Promise.all(\n    //   Array(parseInt(requestCount))\n    //     .fill()\n    //     .map((element, index) => {\n    //       return campaign.methods.requests(index).call();\n    //     })\n    // );\n  };\n\n  //On appointment onSubmit\n\n  onAppointmentSubmit = async event => {\n    event.preventDefault();\n  };\n  //State methods to handle state of inputs\n  //Patient add form handler methods\n  onPatientIdHandle = event => {\n    this.setState({ patientId: event.target.value });\n  };\n  onPatientHandle = event => {\n    this.setState({ patientName: event.target.value });\n  };\n\n  onGenderHandle = event => {\n    this.setState({ patientGender: event.target.value });\n  };\n\n  onAgeHandle = event => {\n    this.setState({ patientAge: event.target.value });\n  };\n\n  //Doctor form handler mathodes\n  onDoctorIdHandle = event => {\n    this.setState({ doctorId: event.target.value });\n  };\n  onDoctorHandle = event => {\n    this.setState({ doctorName: event.target.value });\n  };\n\n  onQualificationHandle = event => {\n    this.setState({ doctorQualification: event.target.value });\n  };\n\n  onGenderDoctorHandle = event => {\n    this.setState({ doctorGender: event.target.value });\n  };\n\n  onAppointmentId = event => {\n    this.setState({ appointmentId: event.target.value });\n  };\n  onPatientAccountHandle = event => {\n    this.setState({ patientAccount: event.target.value });\n  };\n  onDoctorAccountHandle = event => {\n    this.setState({ doctorAccount: event.target.value });\n  };\n  onTextArea = event => {\n    this.setState({ textArea: event.target.value });\n    console.log(this.state.textArea);\n  };\n\n  handlePatientChange = (e, { value }) => {\n    //  console.log(value);\n    this.setState({ currentPatientValue: value });\n    console.log(this.state.currentPatientValue);\n  };\n\n  handleDoctorChange = (e, { value }) => {\n    //  console.log(value);\n    this.setState({ currentDoctorValue: value });\n    console.log(this.state.currentDoctorValue);\n  };\n\n  onAppointmentSubmit = event => {\n    console.log(this.state.currentPatientValue);\n    console.log(this.state.currentDoctorValue);\n    console.log(this.state.date1);\n    console.log(this.state.date);\n  };\n  //render methods to render jsx Components\n  renderDropDownPatient = patienId => {\n    const { currentPatientValue, patientIdArray } = this.state;\n\n    console.log(\"render maethod:\", this.state.patientIdArray);\n    const patientArray = this.state.patientIdArray.map((element, index) => {\n      //console.log(\"element:\", index, element.toNumber());\n      var element1 = element.toNumber().toString();\n      return {\n        key: index,\n        text: element1,\n        value: element1\n      };\n    });\n    const options = patientArray.map((element1, index) => {\n      return { key: index, text: element1, value: element1 };\n    });\n    console.log(\"options :\", options);\n    console.log(\"patient Array:\", patientArray);\n    //\n    // { key: index, text:element.toNumber() , value: element.toNumber() },\n    // { key: 2, text: \"Choice 2\", value: 2 },\n    // { key: 3, text: \"Choice 3\", value: 3 }\n    // ];\n    return (\n      <Dropdown\n        clearable\n        options={patientArray}\n        selection\n        search\n        value={currentPatientValue}\n        onChange={this.handlePatientChange}\n      />\n    );\n  };\n  renderDropDownDoctor = doctorId => {\n    const { currentDoctorValue } = this.state;\n    console.log(\"render maethod:\", this.state.doctorIdArray);\n    const doctorArray = this.state.doctorIdArray.map((element, index) => {\n      //console.log(\"element:\", index, element.toNumber());\n      var element1 = element.toNumber().toString();\n      return {\n        key: index,\n        text: element1,\n        value: element1\n      };\n    });\n    console.log(\"options :\", options);\n    console.log(\"patient Array:\", patientArray);\n\n    // const options = [\n    //   { key: 1, text: \"Choice 1\", value: 1 },\n    //   { key: 2, text: \"Choice 2\", value: 2 },\n    //   { key: 3, text: \"Choice 3\", value: 3 }\n    // ];\n    // console.log(\"OPTIONS:\", options);\n    return (\n      <Dropdown\n        clearable\n        options={doctorArray}\n        selection\n        value={currentDoctorValue}\n        onChange={this.handleDoctorChange}\n      />\n    );\n  };\n  renderTabs() {\n    const panes = [\n      {\n        menuItem: \"Add Patient\",\n        render: () => (\n          <Tab.Pane attached={false}>\n            <h1>Patient Information</h1>\n            <Form onSubmit={this.addPatient}>\n              <Form.Group widths=\"equal\">\n                <Form.Field>\n                  <label>Patient ID</label>\n                  <Input\n                    value={this.state.patientId}\n                    onChange={this.onPatientIdHandle}\n                  />\n                </Form.Field>\n                <Form.Field>\n                  <label>Patient Name</label>\n                  <Input\n                    value={this.state.patientName}\n                    onChange={this.onPatientHandle}\n                  />\n                </Form.Field>\n              </Form.Group>\n              <Form.Group widths=\"equal\">\n                <Form.Field>\n                  <label>Patient Gender</label>\n                  <Input\n                    value={this.state.patientGender}\n                    onChange={this.onGenderHandle}\n                  />\n                </Form.Field>\n                <Form.Field>\n                  <label>Patient Age</label>\n                  <Input\n                    value={this.state.patientAge}\n                    onChange={this.onAgeHandle}\n                  />\n                </Form.Field>\n              </Form.Group>\n\n              <Form.Field>\n                <label>Account</label>\n                <Input\n                  value={this.state.patientAccount}\n                  onChange={this.onPatientAccountHandle}\n                />\n              </Form.Field>\n              <Button primary> Add Patient </Button>\n            </Form>\n          </Tab.Pane>\n        )\n      },\n      {\n        menuItem: \"Add Doctor\",\n        render: () => (\n          <Tab.Pane attached={false}>\n            <h1>Doctor Information</h1>\n\n            <Form onSubmit={this.addDoctor}>\n              <Form.Group widths=\"equal\">\n                <Form.Field>\n                  <label>Doctor ID</label>\n                  <Input\n                    value={this.state.doctorId}\n                    onChange={this.onDoctorIdHandle}\n                  />\n                </Form.Field>\n\n                <Form.Field>\n                  <label>Doctor Name</label>\n                  <Input\n                    value={this.state.doctorName}\n                    onChange={this.onDoctorHandle}\n                  />\n                </Form.Field>\n              </Form.Group>\n              <Form.Group widths=\"equal\">\n                <Form.Field>\n                  <label>Doctor Gender</label>\n                  <Input\n                    value={this.state.doctorGender}\n                    onChange={this.onGenderDoctorHandle}\n                  />\n                </Form.Field>\n                <Form.Field>\n                  <label>Doctor Qualification</label>\n                  <Input\n                    value={this.state.doctorQualification}\n                    onChange={this.onQualificationHandle}\n                  />\n                </Form.Field>\n              </Form.Group>\n              <Form.Field>\n                <label>Account</label>\n                <Input\n                  value={this.state.doctorAccount}\n                  onChange={this.onDoctorAccountHandle}\n                />\n              </Form.Field>\n              <Button primary> Add Doctor </Button>\n            </Form>\n          </Tab.Pane>\n        )\n      },\n      {\n        menuItem: \"Create Appointment\",\n        render: () => (\n          <Tab.Pane attached={false}>\n            <h1>Create Appointment</h1>\n            <Form onSubmit={this.onAppointmentSubmit}>\n              <Form.Group widths=\"equal\">\n                <Form.Field>\n                  <label>Appointment Id</label>\n                  <Input\n                    value={this.state.appointmentId}\n                    onChange={this.onAppointmentId}\n                  />\n                </Form.Field>\n                <Form.Field>\n                  <label>Appointment Date </label>\n                  <Input\n                    action={{\n                      color: \"teal\",\n                      icon: \"calendar\",\n                      onClick: () => this.setState({ dateTimeOpen: true })\n                    }}\n                    actionPosition=\"left\"\n                    value={moment(this.state.myDate).format(\"LLL\")}\n                    onClick={() => this.setState({ dateTimeOpen: true })}\n                    disabled={this.state.dateTimeOpen}\n                    fluid\n                  />\n                  {this.state.dateTimeOpen && (\n                    <DatetimePicker\n                      onChange={value => {\n                        this.setState({ myDate: value, dateTimeOpen: false });\n                        this.setState({\n                          date: moment(this.state.myDate).format(\"LLL\")\n                        });\n                      }}\n                      moment={this.myDate}\n                      time={true}\n                    />\n                  )}\n                </Form.Field>\n              </Form.Group>\n              <Form.Group widths=\"equal\">\n                <Form.Field>\n                  <label>Patient ID</label>\n                  {this.renderDropDownPatient()}\n                </Form.Field>\n\n                <Form.Field>\n                  <label>Doctor ID</label>\n                  {this.renderDropDownDoctor()}\n                </Form.Field>\n              </Form.Group>\n              <Form.Field>\n                <Form.TextArea\n                  label=\"Chep Complaint\"\n                  rows={2}\n                  placeholder=\"write patient disease...\"\n                  onChange={this.onTextArea}\n                />\n              </Form.Field>\n\n              <Button primary> Add Doctor </Button>\n            </Form>\n          </Tab.Pane>\n        )\n      }\n    ];\n    return <Tab menu={{ attached: false }} panes={panes} />;\n  }\n\n  renderHospital() {\n    const { address, hospitalName, adminName, manager } = this.props;\n    return (\n      <div>\n        <div>Hospital Name: {hospitalName}</div>\n        <div>Admin Name: {adminName}</div>\n        <div>Account: {manager}</div>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <Layout>\n        <div>\n          <Button\n            floated=\"right\"\n            primary\n            content=\"Show admin View\"\n            onClick={this.onUnlockView}\n          />\n          <div style={{ marginLeft: 300 }}>\n            <h1>Hospital Details</h1>\n          </div>\n          <div\n            style={{\n              backgroundColor: \"#4267b2\",\n              color: \"white\",\n              marginTop: 10,\n              borderRadius: 4,\n              padding: 10,\n              paddingLeft: 50,\n              margin: 10,\n              fontFamily: \"Times New Roman, Times, serif\",\n              fontSize: 20\n            }}\n          >\n            {this.renderHospital()}\n          </div>\n        </div>\n        <hr />\n        <ToggleDisplay show={this.state.show}>\n          {\" \"}\n          <h1 style={{ marginLeft: 300 }}>Admin Panel</h1>\n          {this.renderTabs()}\n        </ToggleDisplay>\n        <ToggleDisplay show={!this.state.show}>\n          {\" \"}\n          <div>\n            <h1 style={{ color: \"red\" }}>{this.state.notAdmin}</h1>\n          </div>\n        </ToggleDisplay>\n      </Layout>\n    );\n  }\n}\n\nexport default hospitalDetails;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AACA;;;;;;AAiDA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AALA;AAAA;AACA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;AACA;AADA;AAcA;AAdA;AAAA;AACA;AADA;AAgBA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAtBA;AAAA;AACA;AADA;AAuBA;AAvBA;AAAA;AACA;AADA;AAwBA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AACA;AAGA;AACA;AACA;AA3EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;AA6EA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AACA;AADA;AAWA;AACA;AAZA;AAAA;AAAA;AACA;AADA;AAeA;AAfA;AAAA;AAmBA;AACA;AACA;AACA;AACA;AAKA;AAAA;AACA;AA7BA;AAiBA;AAaA;AA9BA;AAAA;AACA;AADA;AAAA;AAAA;AAgCA;AACA;AAjCA;AAAA;AAAA;AACA;AADA;AAmCA;AAnCA;AAAA;AACA;AADA;AAsCA;AAtCA;AAAA;AACA;AADA;AAwCA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AA0FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AAFA;AAAA;AAAA;AACA;AADA;AAMA;AANA;AAAA;AAUA;AACA;AACA;AACA;AACA;AAKA;AAAA;AACA;AApBA;AAQA;AAaA;AArBA;AAAA;AACA;AADA;AAAA;AAAA;AAuBA;AACA;AAxBA;AAAA;AAAA;AACA;AADA;AA0BA;AA1BA;AAAA;AACA;AADA;AA6BA;AA7BA;AAAA;AACA;AADA;AAiCA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AA7CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;AAgDA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAIA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;;;;;;AApNA;;;;;;;;;;AAEA;AACA;AACA;;AAEA;AACA;;AADA;;AAEA;AACA;;AADA;;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;;AAVA;AAWA;AACA;AAAA;AAAA;AAEA;AACA;;;;;;;;;;;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;AACA;AACA;;;AAuLA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAIA;AACA;AAFA;AAQA;AACA;AAFA;AAMA;AAAA;AAIA;AACA;AAFA;AAQA;AACA;AAFA;AAUA;AACA;AAFA;AAKA;AAAA;AA5CA;AAFA;AAoDA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAIA;AACA;AAFA;AASA;AACA;AAFA;AAMA;AAAA;AAIA;AACA;AAFA;AAQA;AACA;AAFA;AASA;AACA;AAFA;AAKA;AAAA;AA7CA;AAFA;AAqDA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAIA;AACA;AAFA;AAQA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAVA;AAcA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AARA;AAaA;AAAA;AAaA;AACA;AACA;AACA;AAJA;AAQA;AAAA;AA5DA;AAFA;AAoEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAOA;;;AAEA;AACA;AAIA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AADA;AAiBA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AAAA;AAGA;AAAA;AAAA;AAAA;AAKA;;;AAjmBA;;;;AACA;;;;;;AACA;AACA;;AACA;AACA;;AADA;AACA;AACA;;AACA;AACA;;AADA;;AACA;AACA;;AADA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;;;;;;;;;;;;AAMA;AACA;;;;AApDA;AACA;AA4nBA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}