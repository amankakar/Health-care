{"version":3,"file":"static/webpack/static/development/pages/patient.js.0205f1c7973f2cf62840.hot-update.js","sources":["webpack:///./pages/patient/index.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport Layout from \"../../components/patientLayout\";\nimport ReceptionistFactory from \"../../build/contracts/ReceptionsitFactory.json\";\nimport Patient from \"../../build/contracts/Patient.json\";\nimport AppointmentRow from \"../../components/AppointmentRow\";\nimport truffleContract from \"truffle-contract\";\nimport {\n  Card,\n  Button,\n  Tab,\n  Form,\n  Input,\n  Dropdown,\n  Table,\n  Grid,\n  Segment,\n  Message\n} from \"semantic-ui-react\";\nimport Link from \"../../routes\";\nimport web3 from \"../../ethereum/web3\";\n\nclass patient extends Component {\n  static async getInitialProps() {\n    const accounts = await web3.eth.getAccounts();\n    console.log(accounts[0]);\n    const factory = truffleContract(ReceptionistFactory);\n    factory.setProvider(web3.currentProvider);\n    const instanceFactory = await factory.deployed();\n    console.log(instanceFactory);\n    const patient = truffleContract(Patient);\n    patient.setProvider(web3.currentProvider);\n\n    const patientAddress = await instanceFactory.accountToAddressPatient.call(\n      accounts[0]\n    );\n    console.log(patientAddress);\n    if (patientAddress == 0x0000000000000000000000000000000000000000) {\n      alert(\"Sorry check your account or contact with authorized person\");\n\n      return { patientAddress: null };\n    } else {\n      const patientContract = await patient.at(patientAddress);\n      console.log(\"patient address :\", patientContract);\n\n      const patientId = await patientContract.patientId.call();\n      const summary = await patientContract.getSummary.call(patientId);\n      console.log(summary);\n      const appointmentList = await patientContract.getAppointmentList.call();\n      console.log(appointmentList);\n\n      const appointmentListData = await Promise.all(\n        Array(parseInt(appointmentList))\n          .fill()\n          .map(async (element, index) => {\n            const appointmentId = await patientContract.appointmentsList.call(\n              index\n            );\n            return patientContract.appointments.call(appointmentId);\n          })\n      );\n      console.log(\"Appointment Data:\", appointmentListData);\n\n      return {\n        patient: patientContract,\n        appointmentListData: appointmentListData,\n        account: accounts[0],\n        patientId: summary[0].toNumber(),\n        patientName: summary[1],\n        patientGender: summary[2],\n        patientAge: summary[3].toNumber(),\n        patientAccount: summary[4],\n        patientAddress: patientAddress\n      };\n    }\n  }\n\n  state = {\n    appointmentIdResult: \"\",\n    appointmentIdSearch: \"\",\n    patientIdResult: \"\",\n    doctorIdresult: \"\",\n    dateResult: \"\",\n    chepComplaintResult: \"\",\n    loading: false,\n    errorMessage: \"\",\n    doctorId: \"\",\n    loadingDis: false,\n    errorMessageDis: \"\",\n    doctorIdDis: \"\"\n  };\n\n  renderRow() {\n    return this.props.appointmentListData.map((appointment, index) => {\n      return (\n        <AppointmentRow\n          key={index}\n          appointment={appointment}\n          address={this.props.patientAddress}\n        />\n      );\n    });\n  }\n\n  onSearchAppointment = async event => {\n    event.preventDefault();\n    const patient = this.props.patient;\n    console.log(patient);\n\n    const appointmentResult = await patient.appointments.call(\n      parseInt(this.state.appointmentIdSearch)\n    );\n    console.log(appointmentResult);\n    this.setState({\n      appointmentIdResult: appointmentResult[0].toNumber(),\n      patientIdResult: appointmentResult[1].toNumber(),\n      doctorIdresult: appointmentResult[2].toNumber(),\n      dateResult: appointmentResult[3],\n      chepComplaintResult: appointmentResult[4]\n    });\n    // console.log(this.state.appointmentResult);\n    this.onSearch();\n  };\n\n  onSearch = () => {\n    if (this.state.appointmentIdResult) {\n      return (\n        <Table singleLine>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell>Appointement Id</Table.HeaderCell>\n              <Table.HeaderCell>Patient Id</Table.HeaderCell>\n              <Table.HeaderCell>Doctor Id</Table.HeaderCell>\n              <Table.HeaderCell>Date</Table.HeaderCell>\n              <Table.HeaderCell>Chief Complaint</Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            <Table.Row>\n              <Table.Cell>{this.state.appointmentIdResult}</Table.Cell>\n              <Table.Cell>{this.state.patientIdResult}</Table.Cell>\n              <Table.Cell>{this.state.doctorIdresult}</Table.Cell>\n              <Table.Cell>{this.state.dateResult}</Table.Cell>\n              <Table.Cell>{this.state.chepComplaintResult}</Table.Cell>\n            </Table.Row>\n          </Table.Body>\n        </Table>\n      );\n    } else {\n      return <h1>No Record Found</h1>;\n    }\n  };\n\n  onAppointmentIdSearch = event => {\n    this.setState({ appointmentIdSearch: event.target.value });\n  };\n\n  onDoctorId = event => {\n    this.setState({ doctorId: event.target.value });\n  };\n  onDoctorIdDis = event => {\n    this.setState({ doctorIdDis: event.target.value });\n  };\n\n  onSumbitApproval = async event => {\n    event.preventDefault();\n    const patient = this.props.patient;\n    this.setState({ loading: true, errorMessage: \"\" });\n    console.log(patient);\n\n    const isPresent = await patient.doctorApproval.call(this.state.doctorId);\n    console.log(isPresent);\n    if (!isPresent) {\n      try {\n        await patient.addDoctorApproval(this.state.doctorId, {\n          from: this.props.account\n        });\n        alert(this.state.doctorId + \"is Approved to view Your Record\");\n      } catch (error) {\n        console.log(\"Error of try:\", error);\n        this.setState({ errorMessage: error.message });\n      }\n    } else {\n      alert(\"Already Approved\");\n    }\n    this.setState({ loading: false });\n  };\n\n  onSumbitDisapprove = async event => {\n    event.preventDefault();\n    const patient = this.props.patient;\n    this.setState({ loadingDis: true, errorMessageDis: \"\" });\n    console.log(patient);\n\n    const isPresent = await patient.doctorApproval.call(this.state.doctorIdDis);\n    console.log(isPresent);\n    if (isPresent) {\n      console.log(this.state.doctorIdDis);\n      try {\n        await patient.blockDoctor(this.state.doctorIdDis, {\n          from: this.props.account,\n          gas: \"100000\"\n        });\n        alert(this.state.doctorIdDis + \"is disApproved to view Your Record\");\n      } catch (error) {\n        console.log(\"Error of try:\", error);\n        this.setState({ errorMessageDis: error.message });\n      }\n    } else {\n      alert(\"Already DisApproved\");\n    }\n    this.setState({ loadingDis: false });\n  };\n  renderTabs() {\n    const { Header, Row, HeaderCell, Body } = Table;\n\n    const panes = [\n      {\n        menuItem: \"View Record\",\n        render: () => (\n          <Tab.Pane attached={false}>\n            <h1>Patient Record of Health-care</h1>\n            <Table>\n              <Header>\n                <Row>\n                  <HeaderCell>Appointment ID</HeaderCell>\n                  <HeaderCell>Patient ID</HeaderCell>\n                  <HeaderCell>Doctor ID</HeaderCell>\n                  <HeaderCell>Date</HeaderCell>\n                  <HeaderCell>Chief Complaint</HeaderCell>\n                  <HeaderCell> Hash</HeaderCell>\n                </Row>\n              </Header>\n\n              <Body>{this.renderRow()}</Body>\n            </Table>\n          </Tab.Pane>\n        )\n      },\n      {\n        menuItem: \"Search Appointment\",\n        render: () => (\n          <Tab.Pane attached={false}>\n            <h1>Search Appointment</h1>\n            <Form onSubmit={this.onSearchAppointment}>\n              <Form.Group widths=\"equal\">\n                <Form.Field>\n                  <label>Appointment Id</label>\n                  <Input\n                    value={this.state.appointmentIdSearch}\n                    onChange={this.onAppointmentIdSearch}\n                  />\n                </Form.Field>\n\n                <Button primary> Search Appointment </Button>\n              </Form.Group>\n            </Form>\n            {this.onSearch()}\n          </Tab.Pane>\n        )\n      },\n      {\n        menuItem: \"Approve/DisApprove Doctor\",\n        render: () => (\n          <Tab.Pane attached={false}>\n            <Grid columns={2} divided>\n              <Grid.Row stretched>\n                <Grid.Column>\n                  <Segment>\n                    <h1>Approve Doctor</h1>\n                    <Form\n                      onSubmit={this.onSumbitApproval}\n                      error={!!this.state.errorMessage}\n                    >\n                      <Form.Field>\n                        <label>Doctor Id</label>\n                        <Input\n                          value={this.state.doctorId}\n                          onChange={this.onDoctorId}\n                        />\n                      </Form.Field>\n                      <Message\n                        error\n                        header=\"Oops..!\"\n                        content={this.state.errorMessage}\n                      />\n\n                      <Button loading={this.state.loading} primary>\n                        {\" \"}\n                        Approve Doctor{\" \"}\n                      </Button>\n                    </Form>\n                  </Segment>\n                </Grid.Column>\n                <Grid.Column>\n                  <Segment>\n                    <h1>DisApprove Doctor</h1>\n                    <Form\n                      onSubmit={this.onSumbitDisapprove}\n                      error={!!this.state.errorMessageDis}\n                    >\n                      <Form.Field>\n                        <label>Doctor Id</label>\n                        <Input\n                          value={this.state.doctorIdDis}\n                          onChange={this.onDoctorIdDis}\n                        />\n                      </Form.Field>\n                      <Message\n                        error\n                        header=\"Oops..!\"\n                        content={this.state.errorMessageDis}\n                      />\n\n                      <Button loading={this.state.loadingDis} primary>\n                        {\" \"}\n                        disApprove Doctor{\" \"}\n                      </Button>\n                    </Form>\n                  </Segment>\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>{\" \"}\n          </Tab.Pane>\n        )\n      }\n    ];\n    return <Tab menu={{ attached: false }} panes={panes} />;\n  }\n  render() {\n    if (this.props.patientAddress === null) {\n      return (\n        <Layout>\n          <div style={{ color: \"red\" }}>\n            <h1>\n              You are not Registered as Patient or you have selected wrong\n              account in metamask\n            </h1>\n          </div>\n        </Layout>\n      );\n    } else {\n      return (\n        <Layout>\n          <div>\n            <div\n              style={{\n                backgroundColor: \"#4267b2\",\n                color: \"white\",\n                marginTop: 10,\n                borderRadius: 4,\n                padding: 10,\n                paddingLeft: 50,\n                margin: 10,\n                fontFamily: \"Times New Roman, Times, serif\",\n                fontSize: 20\n              }}\n            >\n              <div>Patient Name: {this.props.patientName}</div>\n              <div>Patient Id:{this.props.patientId}</div>\n              <div>Patient Gender:{this.props.patientGender}</div>\n              <div>Patient Age:{this.props.patientAge}</div>\n              <div>Patient Account: {this.props.patientAccount}</div>\n            </div>\n          </div>\n          <div>{this.renderTabs()}</div>\n        </Layout>\n      );\n    }\n  }\n}\nexport default patient;\n"],"mappings":"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","sourceRoot":""}